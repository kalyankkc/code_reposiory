node {


environment {
    registry = "kalyankkc/capstoneproject"
    registryCredential = 'kalyan-dockerhub'
  }

 try  {
 notify('Job Started') 

     
  stage('Git-Checkout') {
  sh 'rm -rf code_repo'
  sh 'git clone https://github.com/kalyankkc/code_repo.git'
  }
    
 def project_path="code_repo/Bikes/"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: 'maven clean', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
   sh label: 'maven compile', script: 'mvn compile'
  }

   stage('sonar') {
        withSonarQubeEnv('sonarqube') {
            sh "mvn sonar:sonar"
        }
    }
    
        stage("Quality Gate"){
        timeout(time: 1, unit: 'HOURS') {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
        }
      }
      
        
   stage('Maven-Test') {
   sh label: 'maven test ', script: 'mvn test'
  }
  
   stage('Maven-Package') {
   sh label: 'maven package', script: 'mvn package'
  }
    
      stage('Jfrog Artifacory'){
        def server= Artifactory.server 'Jfrog'
            def uploadSpec= """{
                "files": [{
                "pattern": "target/*.war",
                "target": "project-warfile"}]
            }"""
            server.upload(uploadSpec)
    }
  
  
}
   def docker_path="code_repo/docker/"
 dir(docker_path) {
   
   stage('Test-Sever-Deployment') {
   
        def server= Artifactory.server 'Jfrog'
            def downloadSpec = """{
                "files": [{
                "pattern": "project-warfile/*.war",
                "target": "jfrogdownload/" }]
            }"""
        server.download(downloadSpec)
   
   
   sh label: '', script: 'docker-compose up -d --build'
  }
  
   stage('Pushing DockerImage to DockerHub') {
	  docker.withRegistry('', "kalyan-dockerhub ) {
		     script: 'docker push kalyankkc/capstoneproject:$BUILD_NUMBER'
		  }
  }
}
  
  
    stage('Infrastructure for Producion - Provisioning Approval') {
  	input "Start provisioning the production server?"
  }
  stage('Downstream Build -- Infrastruture Provisioning in AWS Cloud'){
	 build 'Terraform-Job'
	}
  
notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}



def notify(status){
    emailext (
	to: "kalyankkc118@.gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
